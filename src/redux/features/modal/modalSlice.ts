import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export type OpenModalType = {
  type: string;
  payloadData?: any;
  disallowAClose?: ModalInitialStatesType["disallowAClose"];
  size?: typeSizes;
  scrollBehavior?: ModalInitialStatesType["scrollBehavior"];
  isDismissable?: ModalInitialStatesType["isDismissable"];
  placement?: ModalInitialStatesType["placement"];
  backdrop?: ModalInitialStatesType["backdrop"];
  modalTitle?: ModalInitialStatesType["modalTitle"];
  onclose?: ModalInitialStatesType["onclose"];
  className?: ModalInitialStatesType["className"];
};

// Defining a custom type for modal sizes
export type typeSizes =
  | "xs"
  | "sm"
  | "md"
  | "lg"
  | "xl"
  | "2xl"
  | "3xl"
  | "4xl"
  | "5xl"
  | "full";

// Defining the initial state type for the modal slice
type ModalInitialStatesType = {
  isOpen: boolean;
  type: string;
  size?: typeSizes;
  payloadData?: any;
  disallowAClose?: boolean;
  scrollBehavior: "inside" | "normal" | "outside";
  isDismissable?: boolean;
  placement?:
    | "auto"
    | "bottom"
    | "bottom-center"
    | "center"
    | "top"
    | "top-center";
  backdrop?: "opaque" | "blur" | "transparent";
  modalTitle?: string;
  onclose?: string;
  className?: string;
};

// Defining the initial state for the modal
const initialState: ModalInitialStatesType = {
  isOpen: false,
  disallowAClose: false,
  type: "",
  scrollBehavior: "inside",
  isDismissable: true,
  placement: "auto",
  backdrop: "blur",
  onclose: undefined,
};

// Creating the modal slice using Redux Toolkit's createSlice function
const ModalSlice = createSlice({
  name: "CustomTableActionModal",
  initialState: initialState,
  reducers: {
    // Action to allow the modal to be closed
    setAllowClose: (state) => {
      state.disallowAClose = false;
    },

    // Action to disallow the modal to be closed
    setDisallowAClose: (state) => {
      state.disallowAClose = true;
    },

    // Action to open the modal with a specific type, size, and optional data
    setModalOpen: (state, action: PayloadAction<OpenModalType>) => {
      state.isOpen = true;
      state.type = action.payload.type;
      state.size = action.payload.size;
      state.payloadData = action.payload.payloadData;
      state.isDismissable = action.payload.isDismissable;
      state.placement = action.payload.placement;
      state.modalTitle = action.payload.modalTitle;
      state.disallowAClose = action.payload.disallowAClose;
      state.backdrop = action.payload.backdrop;
      state.onclose = action.payload.onclose;
      state.className = action.payload.className;
    },

    // Action to close the modal (only if closing is allowed)
    setModalClose: (state) => {
      if (!state.disallowAClose || state.disallowAClose == undefined) {
        if (state.onclose) {
          eval(state.onclose);
        }
        // Check if closing the modal is allowed
        state.type = "";
        state.payloadData = null;
        state.size = undefined;
        state.isDismissable = undefined;
        state.placement = undefined;
        state.modalTitle = undefined;
        state.disallowAClose = false;
        state.onclose = undefined;
        state.isOpen = false;
      }
    },
  },
});

// Exporting the actions generated by createSlice
export const { setModalClose, setModalOpen, setAllowClose, setDisallowAClose } =
  ModalSlice.actions;

// Exporting the reducer for the modal slice to be used in the root reducer
export default ModalSlice.reducer;
